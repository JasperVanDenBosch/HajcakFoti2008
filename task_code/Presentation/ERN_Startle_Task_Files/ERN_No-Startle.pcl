# creates a unique log(*.txt) file
output_file out = new output_file;
out.open( "RENAME_THIS_ERN_No_Startle_Output.txt" );


int correct_startle = 0;
int errors = 0;
int compatible = 1;
int incompatible = 2;
int correct_startle_counter = 0;
int incorrect_startle_counter = 0;
int R_Time = 0;
int t = 0;
int blockcounter = 0;            # counter for double loop for real trials
int Error_Counter=0;
int total_response_time = 0;     # keeps track of all response times to get average
int average_response_time = 0;   # holds average response time after practice
int counter = 0;                 # counter for inner loop of practice and regular trials
int temp = 0;                    # used to calculate response time
int trial_number = 0;            # keeps track of number of trials
int index_of_first = 0;          # used as the index to get the FIRST response a user makes to get the accurate response time
int okay = 0;                    # used to make sure there was a response

output_port oport = output_port_manager.get_port(1);



#begin practice block 
response_manager.set_port_output(false);
prac_flank.set_stimulus(my_stim[1]); 
#prac_flank.set_target_button(1);
prac_flankers.present();

prac_flank.set_stimulus(my_stim[4]);
#prac_flank.set_target_button(2);
prac_flankers.present();	

my_trial_wait.present();

#real practice block begins

loop
  counter = 1
until
  counter == 16
#	counter == 31
begin	
	
# get random stimulus image
int j = random(1, my_stim.count());      
oport.set_pulse_width(20);   

default2.present();						# used for intertrial interval
      
t = random(1,2);
	
#if the picture presented is middle arrow left, then the target button is 1, otherwise the target button is 2
	if ((j==1)||(j==3)) then
		stim3.set_target_button(1);
	else
		stim3.set_target_button(2);
	end;	

	
   flank_stim.set_stimulus(my_stim[j]);
	flankers.present();	
   target.present();
	
   if ((response_manager.response_count() > 0)) then
		if (response_manager.hits()==1) then
			int k = random(1,20);
			if (k <= 2) then
				if (t == 1) then
					#early_startle_lag.present();
               #startle.present();
				else
              #early_startle_lag.present();
              #startle.present();
				end;
			end;
		else if (response_manager.incorrects()==1) then
			int k = random(1,10);
			errors = errors + 1;
			if (k == 1) then
				if (t == 1) then
					#early_startle_lag.present();
               #startle.present();
				else
					#early_startle_lag.present();
					#startle.present();
				end;
			end;
		end;
	else
		errors = errors + 1;
	end;
	
  counter = counter + 1;
  default2.present();
end; 

#accuracy from practice block
 
counter = counter - 1;
double accuracy = ((double(counter) - double(errors))/double(counter))*100.00;
accuracy = round(accuracy, 1);
string accuracy_value = string (accuracy);
accuracy_value.append("% Correct.  Please wait.");

txt1.set_caption(accuracy_value);
txt1.redraw();
term.print(accuracy_value);
main.present();   
my_trial_wait.present(); 

oport.send_code(254);
default2.present();

# Real Experiment Starts Here -------------------------------------------------------------
# 11 blocks with 30 trials in each
trial_number = 1;
bool last_trial_error = false;

loop
  blockcounter=1
until 
  blockcounter==12
begin

errors = 0;

loop
   counter = 1
until
#   counter == 11
	counter == 31
begin
# formats output file so trial number column size is consistent
   if (trial_number < 10) then                    
   out.print(trial_number);
   out.print("   ");
   elseif (trial_number < 100) then
   out.print(trial_number);
   out.print("  ");
   else
   out.print(trial_number);
   out.print(" ");
   end; 

# get random stimulus image as in practice
	
#Enables or disables automatic port output sent when responses occur. To send port output, use the write_codes or pulse_out header parameter. You can temporarily disable automatic response output by calling this method with an argument of false. Note that if the response_port_output header parameter is false, this method will not enable it.
response_manager.set_port_output(false);

int j = random(1, my_stim.count());  #random selection of picture from the array    
oport.set_pulse_width(20);   

default2.present();		#ITI
      
   
#j 1 and 3 are left, 2 and 4 are right
	if ((j==1)||(j==3)) then
		stim3.set_target_button(1);
	else
		stim3.set_target_button(2);
	end;	

flank_stim.set_stimulus(my_stim[j]);	# present flankers, send code
	if ((j==1)||(j==2)) then
		oport.send_code(compatible);
		out.print(compatible);
   		out.print("  ");
	else
		oport.send_code(incompatible);
		out.print(incompatible);
     		out.print("  ");
	end;
flankers.present();	
	
response_manager.set_port_output(true);

target.present();
   
   response_data last = response_manager.last_response_data();
	if ((response_manager.response_count() == 0)) then
   out.print(9999);
	out.print("  ");
	out.print("\n");
   elseif (last.code()==10)then
		out.print(last.code());
		out.print(" ");
	else
		out.print(last.code());
		out.print("  ");
   end;
   stimulus_data RT = stimulus_manager.last_stimulus_data();
   R_Time = RT.reaction_time();
   if ((response_manager.response_count() == 0)) then
   R_Time = 9999;
	end;
	
   if ((response_manager.response_count() > 0)) then
		if (response_manager.hits()==1) then
			int k = random(1,10);
			correct_startle = random(1,100);
			if ((k <= 5) && (last_trial_error == true)) then
					#last_trial_error = false;
					#early_startle_lag.present();
					#oport.send_code(5);
               #startle.present();
               #out.print(5);
               #out.print("  ");
			elseif (correct_startle <= 4) then
					#last_trial_error = false;
					#early_startle_lag.present();
					#oport.send_code(6);
               #startle.present();
               #out.print(6);
               #out.print("  ");
         else 
					#last_trial_error = false;
					#out.print(0);
               #out.print("  ");
			end;
		elseif (response_manager.incorrects()==1) then
			#last_trial_error = true;
			errors = errors + 1;
			int k = random(1,10);
			if (k <= 5) then							
					#early_startle_lag.present();
					#oport.send_code(7);
               #startle.present();
               #out.print(7);
               #out.print("  ");
			else
					#out.print(0);
               #out.print("  ");
			end;
		end;
	else
		errors = errors + 1;
	end;
	
	if (R_Time < 9999) then
		out.print(R_Time+200);
		out.print("\n");
	end;
	counter = counter + 1;
	trial_number = trial_number+1;
	default2.present();
end;
response_manager.set_port_output(false);

#my_trial_wait.present();

#calculate accuracy
counter = counter - 1;
accuracy = ((double(counter) - double(errors))/double(counter))*100.00;
accuracy = round(accuracy, 1);
accuracy_value = string (accuracy);


#accuracy_value.append("% Correct");

#txt1.set_caption(accuracy_value);
#txt1.redraw();
#term.print(accuracy_value);
#main.present();

if (accuracy<75.00) then
my_trial_more_accurate.present();
elseif (accuracy>90.00) then
my_trial_go_faster.present();
else
my_trial_good_job.present();
end;

response_manager.set_port_output(true);
blockcounter = blockcounter + 1;

end;				
		
out.close();
oport.send_code(255);