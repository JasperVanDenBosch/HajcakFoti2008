# Creates a unique log(*.txt) file
output_file out = new output_file;
out.open( "ERN_Startle_Output.txt" );

int correct_startle = 0;		 	#Establishing correct_startle variable
int errors = 0;			 			#Establishing errors variable
int compatible = 1;		 			#Assigns 1 to compatible trials
int incompatible = 2;		 		#Assigns 2 to incompatible trials
int correct_startle_counter = 0;	# Starting correct startle counter at 0
int incorrect_startle_counter = 0; # Starting incorrect startle counter at 0
int R_Time = 0;			 			  # Establishing the reaction time variable
int t = 0;			 					  # Establishing the "t" variable
int blockcounter = 0;              # Starting counter for loop for blocks at 0
int Error_Counter=0;		 			  # Starting error counter at 0
int total_response_time = 0;      # Keeps track of all response times to get average
int average_response_time = 0;  	 # Holds average response time after practice
int counter = 0;                	 # Starting counter for loop of trials at 0
int temp = 0;                  	 # Used to calculate response time
int trial_number = 0;          	 # Starting number of trials at 0, keeps track of number of trials
int index_of_first = 0;           # Used as the index to get the FIRST response a user makes to get the accurate response time
int okay = 0;                   	 # Used to make sure there was a response

output_port oport = output_port_manager.get_port(1); 			#Assumes using port 1 for output

#Walking participants through task instructions ---------------------------------------------------------------
response_manager.set_port_output(false);							#Don't send event codes for practice flankers
prac_flank.set_stimulus(my_stim[1]);								#Sets first image from array in scenario file (all left) as the stimulus image in the prac_flankers trial
#prac_flank.set_target_button(1);									#No target button set for practice
prac_flankers.present();												#Presents prac_flankers trial		
prac_flank.set_stimulus(my_stim[4]);								#Sets last image from array in scenario file (middle right) as the stimulus image in the prac_flankers trial
#prac_flank.set_target_button(2);									#No target button set for practice
prac_flankers.present();												#Presents prac_flankers trial
my_trial_wait.present();												#Presents wait trial

#Practice block begins -----------------------------------------------------------------------------------------
loop						#Creates a loop for trials
  counter = 1				#From trial 1
until						#To
	counter == 31 			#Trial 30 -- counter is set to 31 so it will stop once it reaches 31 trials
begin						#Begins loop
	
# Get random stimulus image
	int j = random(1, my_stim.count());     # Set j to random integer from 1 to the length of my_stim (4)
   oport.set_pulse_width(20);   		       # Set pulse width for sending event codes to 20 ms
   default2.present();			       		 # Used for intertrial interval
      
   t = random(1,2); 			    				#Sets t variable to a random integer, either 1 or 2
	
	if ((j==1)||(j==3)) then					#If the picture (j) presented has a left facing center arrow (1 or 3 from array)
		stim3.set_target_button(1);				#The target button is 1
	else												#Otherwise,
		stim3.set_target_button(2);				#The target button is 2
	end;												#ends this loop

	
   flank_stim.set_stimulus(my_stim[j]);			#Sets the stimulus for flankers as one of the pictures from the array (my_stim)
	flankers.present();									#Presents flankers trial
   target.present();										#Presents response target trial
	
   if ((response_manager.response_count() > 0)) then			#If there is a response then
		if (response_manager.hits()==1) then							#and that response is correct to a target stimulus
			int k = random(1,20);												#set k variable to a random integer between 1 and 20
			if (k <= 2) then														#if that integer is less than or equal to 2 (10% chance of being true)
				if (t == 1) then														#and t = 1 (50% chance of being true) ***we think that this logic was left over from when they considered using two different startle lags 
					early_startle_lag.present();										#then present 300 ms startle lag trial
               startle.present(); 													#present the startle sound
				else																		#Otherwise,
              	early_startle_lag.present();										#Present 300 ms startle lag trial
             	startle.present();													#present the startle sound
				end;																		#End t = loop  ###In original code but unnecessary as t becomes irrelevant... 
			end;																		#End k<= loop
		elseif (response_manager.incorrects()==1) then				#if the response is incorrect to a target stimulus, then
			int k = random(1,10);												#set k variable to a random integer between 1 and 10
			errors = errors + 1;													#add 1 to error counter
			if (k == 1) then														#if k = 1 (10% chance of being true)
				if (t == 1) then														#and t = 1 (50% chance of being true)
					early_startle_lag.present();										#present 300 ms startle lag
               startle.present();													#present the startle sound
				else																		#Otherwise,
					early_startle_lag.present();										#present early startle lag
					startle.present();													#present startle sound
				end;																		#end t = loop
			end;																		#end k = loop
		end;																		#end response loop
   else																		#Otherwise (i.e., there is no response),
		errors = errors + 1;													#Add 1 to errors counter
    end;																		#End overarching startle loop
	
  counter = counter + 1;											#Add one trial to the trial counter
  default2.present();												#Present intertrial interval as final trial
end; 																		#End the practice block

#show accuracy from practice --------------------------------------------------------------------------------
counter = counter - 1;																						#Subtract 1 from trial counter number
double accuracy = ((double(counter) - double(errors))/double(counter))*100.00;			#Accuracy calculated as trial counter minus errors divided by trial counter and multiplied by 100; all variables changed to double character type
accuracy = round(accuracy, 1);																			#Rounds accuracy to 1 decimal place
string accuracy_value = string (accuracy);															#Creates a string variable from the accuracy value
accuracy_value.append("% Correct.  Please wait.");													#Adds "% Correct. Please wait." after the percent accuracy calculated

txt1.set_caption(accuracy_value);									#Pulls txt1 from .sce file and sets the caption to the accuracy value
txt1.redraw();																#Edits the txt1
term.print(accuracy_value);											#Prints the accuracy value
main.present();   														#Presents main trial
my_trial_wait.present(); 												#Presents wait for experimenter

oport.send_code(254);													#Sends 254 event code
default2.present();														#Presents intertrial interval

# Real Experiment Starts Here ---------------------------------------------------------------------------------
# 8 blocks with 30 trials in each
trial_number = 1;							#Begin at trial 1
bool last_trial_error = false;	   #Set to false to start	

#Block counter from 1 to 9 (stops at 9 blocks for 8 total presented blocks)
loop									#Create block loop
  blockcounter=1								#From block 1
until 									#To
  blockcounter==9							#9 blocks -- will stop at block 8
begin									#Begin loop

errors = 0;							#Resets error counter from practice back to 0

#Trial counter within block counter from 1 to 31 (stops at 31 for 30 total trials presented per block)
loop									#Trial loop within block loop
   counter = 1								#From trial 1
until									#To
	counter == 31							#31 trials -- will stop at trial 30
begin									#Begin loop

# Formats output file so trial number column size is consistent
   if (trial_number < 10) then     				#If trial number is less than 10               
   out.print(trial_number);						#Print the trial number
   out.print("   ");									#Print 3 blank spaces to keep column width 
   elseif (trial_number < 100) then				#If trial number is less than 100
   out.print(trial_number);						#Print the trial number
   out.print("  ");									#Print 2 blank spaces to keep column width    
	else													#Otherwise
   out.print(trial_number);						#Print the trial number
   out.print(" ");									#Print 1 blank space to keep column width 
   end; 													#End this formatting loop

# Get random stimulus image from array as in practice
	
	response_manager.set_port_output(false);		#Do not send event codes while setting stimulus
	int j = random(1, my_stim.count());      		#Set j to random integer from 1 to the length of my_stim (4)
   oport.set_pulse_width(20);   						#Sets the pulse width for event codes to 20 millisec
   default2.present();									#Start with intertrial interval (see sce file)
      
   
#Setting target buttons for stimulus images	
	if ((j==1)||(j==3)) then					#If the picture presented (j) has a left facing arrow (1 or 3) then
		stim3.set_target_button(1);				#The target button is 1 (left mouse button from settings)
	else												#Otherwise,
		stim3.set_target_button(2);				#the target button is 2 (right mouse button from settings)
	end;												#end this loop

#Setting event codes for stimulus images
   flank_stim.set_stimulus(my_stim[j]);	#Sets the stimulus for flankers trial as one of the pictures from the array of pictures from scenario file
	if ((j==1)||(j==2)) then					#If pictures 1 (all left) or 2 (all right) are presented
		oport.send_code(compatible);				#Send event code (1) for "compatible"
		out.print(compatible);						#Print out 1 for "compatible"
		out.print("  ");								#Print 2 blank spaces to keep column width 
	else												#Otherwise,
		oport.send_code(incompatible);			#Send integer code for "incompatible"
		out.print(incompatible);					#Print out  2 for "incompatible"
      out.print("  ");								#Print 2 blank spaces to keep column width 
	end;												#End this loop
	
	flankers.present();							#Present flankers stimulus trial
	
	response_manager.set_port_output(true); #Send event codes

   target.present();								#Present target trial that will capture response to flankers trial
  

   response_data last = response_manager.last_response_data();	#Pulls last response data	
	if ((response_manager.response_count() == 0)) then				#If there is no response logged then
   out.print(9999);															#Print out 9999				
	out.print("  ");															#Print 2 spaces to keep column width consistent
	out.print("\n");															#Go to the next line
   elseif (last.code()==10)then											#Otherwise if the last event code sent is 10 then
		out.print(last.code());												#Print out the last event code
		out.print("    ");													#Print 4 spaces to keep column width consistent
	else																			#Otherwise,
		out.print(last.code());												#Print out the last event code
		out.print("     ");													#Print 5 spaces to keep column width consistent
   end;																			#End this loop

   stimulus_data RT = stimulus_manager.last_stimulus_data();		#Pulls last stimulus data
   R_Time = RT.reaction_time();												#Sets R_Time variable to reaction time recorded by presentation
   if ((response_manager.response_count() == 0)) then					#If there was no response recorded, then
   R_Time = 9999;																	#R_Time is 9999
	end;																				#End this loop

#Startle on correct after error trial
   if ((response_manager.response_count() > 0)) then			#If there was a response, then		
		if (response_manager.hits()==1) then								#if there was a correct response to a target stimulus then
			int k = random(1,10);													#Assign k variable to a random integer between 1 and 10
			correct_startle = random(1,100);										#Assign correct startle variable to a random integer between 1 and 100
			if ((k <= 5) && (last_trial_error == true)) then				#If k<=5 (50% chance of being true), and the last trial is an error, then
					last_trial_error = false;											#Reset last_trial_error to false
					early_startle_lag.present();										#Present 300 ms startle lag trial
					oport.send_code(5);													#send event code 5
               startle.present();													#present startle sound trial
               out.print(5);															#Print out "5"
               out.print("  ");														#print blank spaces to keep column width 

#Startle on random correct trial
			elseif (correct_startle <= 4) then									#If correct_startle <= to 4 (4%) then
					last_trial_error = false;											#Last trial was correct
					early_startle_lag.present();										#Present 300 ms startle lag trial
					oport.send_code(6);													#Send event code 6
               startle.present();													#Present startle sound
               out.print(6);															#Print out "6"
               out.print("  ");														#print blank spaces to keep column width 
         else 																			#Otherwise,
					last_trial_error = false;											#Last trial was correct
					out.print(0);															#Print out "0"
               out.print("  ");														#print blank spaces to keep column width 
			end;																			#End k<= loop
#Startle on error trial
		elseif (response_manager.incorrects()==1) then					#Otherwise, if the response is incorrect on a target stimulus then
			last_trial_error = true;												#Last trial was an error
			errors = errors + 1;														#Add 1 to error counter
			int k = random(1,10);													#Assign k variable to a random integer between 1 and 10
			if (k <= 5) then															#If k <=5 (50% chance fo being true), then						
					early_startle_lag.present();										#Present 300 ms startle lag trial
					oport.send_code(7);													#Send event code 7
               startle.present();													#Present startle sound trial
               out.print(7);															#Print out "7"
               out.print("  ");														#print blank spaces to keep column width 
			else																			#Otherwise
					out.print(0);															#Print out "0"
               out.print("  ");														#print blank spaces to keep column width 
			end;																			#End k<= loop
		end;																			#End response loop
	else																	#Otherwise (i.e., there was no response),
		errors = errors + 1;													#Add 1 to errors counter
	end;																	#End startle loop

	if (R_Time < 9999) then									#If response time is less than 9999 (i.e., there was a response recorded)
		out.print(R_Time+200);									#Print out the reaction time and add 200 to account for the amount of time flankers were on the screen
		out.print("\n");											#Print out a new line
	end;															#End this loop

	counter = counter + 1;								#Add 1 trial to the trial counter
	trial_number = trial_number + 1;					#Add 1 to the trial number
	default2.present();									#Present intertrial interval
end;															#End of trial loop 

response_manager.set_port_output(false);			#Stop sending event codes

my_trial_wait.present();								#Present "wait for experimenter" trial

#calculate accuracy --------------------------------------------------------------------------------------------
counter = counter - 1;																			#Subtract 1 from trial counter 
accuracy = ((double(counter) - double(errors))/double(counter))*100.00;			#Accuracy calculated as trial counter minus errors divided by trial counter and multiplied by 100; all variables changed to double character type
accuracy = round(accuracy, 1);																#Rounds accuracy to 1 decimal place
accuracy_value = string (accuracy);															#Creates a string variable from the accuracy value					

#Accuracy not displayed after each block, so these lines of code will not be used in the task (was sent to us this way from original authors)
#accuracy_value.append("% Correct");						#Add "% Correct" after the calculated accuracy value
#txt1.set_caption(accuracy_value);							#Pulls txt1 from .sce file and sets the caption to the accuracy value
#txt1.redraw();													#Edits the txt1
#term.print(accuracy_value);									#Prints the accuracy value
#main.present();													#Presents main trial

#conditions for accuracy calculations
if (accuracy<75.00) then								#If accuracy is less than 75%
my_trial_more_accurate.present();					#Present more accurate text trial on screen
elseif (accuracy>90.00) then							#If accuracy is greater than 90%
my_trial_go_faster.present();							#Present go faster text trial on screen
else															#Otherwise,
my_trial_good_job.present();							#Present good job text trial on screen
end;															#End this loop

response_manager.set_port_output(true);			#Send event codes
blockcounter = blockcounter + 1;						#Add 1 to block counter

end;															#End of block loop 		
		
out.close();												#Close the task window
oport.send_code(255);									#Send event code 255